"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[429],{6663:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=n(5893),l=n(1151);const s={title:"Name Service",sidebar_label:"Bonus",sidebar_position:6,slug:"/build/name-service-bonus"},a="Extra Challenges",i={id:"build-your-application/extra-challenge",title:"Name Service",description:"Challenge 1: Limit Input",source:"@site/versioned_docs/version-v0.50.x/02-build-your-application/06-extra-challenge.md",sourceDirName:"02-build-your-application",slug:"/build/name-service-bonus",permalink:"/spawn/v0.50/build/name-service-bonus",draft:!1,unlisted:!1,tags:[],version:"v0.50.x",sidebarPosition:6,frontMatter:{title:"Name Service",sidebar_label:"Bonus",sidebar_position:6,slug:"/build/name-service-bonus"},sidebar:"defaultSidebar",previous:{title:"Testnet",permalink:"/spawn/v0.50/build/name-service-testnet"},next:{title:"Summary",permalink:"/spawn/v0.50/build/name-service-summary"}},o={},c=[{value:"Challenge 1: Limit Input",id:"challenge-1-limit-input",level:2},{value:"Challenge 2: Resolve Wallet From Name",id:"challenge-2-resolve-wallet-from-name",level:2}];function m(e){const t={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,l.a)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"extra-challenges",children:"Extra Challenges"}),"\n",(0,r.jsx)(t.h2,{id:"challenge-1-limit-input",children:"Challenge 1: Limit Input"}),"\n",(0,r.jsxs)(t.p,{children:["It seems the nameservice will let you set any name length you want. Add a validation check in ",(0,r.jsx)(t.code,{children:"SetServiceName"})," to ensure the name is less than 32 characters long."]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:"Hint #1"}),(0,r.jsxs)("p",{children:["The ",(0,r.jsx)(t.code,{children:"SetServiceName"})," in the msg_server.go looks like an interesting place to start. It should return an error if the name is too long."]})]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:"Solution"}),(0,r.jsx)(t.p,{children:"If a user attempts to submit a name longer than 32 characters, it will return an error that is not allowed."}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",metastring:'title="x/nameservice/keeper/msg_server.go"',children:'// SetServiceName implements types.MsgServer.\nfunc (ms msgServer) SetServiceName(ctx context.Context, msg *types.MsgSetServiceName) (*types.MsgSetServiceNameResponse, error) {\n\tif len(msg.Name) > 32 {\n\t\treturn nil, fmt.Errorf("name cannot be longer than 32 characters")\n\t}\n\n\tif err := ms.k.NameMapping.Set(ctx, msg.Sender, msg.Name); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &types.MsgSetServiceNameResponse{}, nil\n}\n'})})]}),"\n",(0,r.jsx)(t.h2,{id:"challenge-2-resolve-wallet-from-name",children:"Challenge 2: Resolve Wallet From Name"}),"\n",(0,r.jsxs)(t.p,{children:["Currently the nameservice only allows you to resolve a name given a wallet. If someone has a name they should be able to resolve the wallet address. Add a new query to the ",(0,r.jsx)(t.code,{children:"query_server"})," and autocli client to resolve a wallet address from a name."]}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:"This challenge is signinicantly harder and will some previous Go programming knowledge with iterators. You can also just copy the solutions."}),"\n"]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:"Hint #1"}),(0,r.jsx)("p",{children:"Create a new query.proto for ResolveWallet that takes in a name string"})]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:"Solution #1"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-protobuf",metastring:'title="proto/nameservice/v1/query.proto"',children:'// Query provides defines the gRPC querier service.\nservice Query {\n  // Params queries all parameters of the module.\n  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {\n    option (google.api.http).get = "/nameservice/v1/params";\n  }\n\n  // ResolveName allows a user to resolve the name of an account.\n  rpc ResolveName(QueryResolveNameRequest) returns (QueryResolveNameResponse) {\n    option (google.api.http).get = "/nameservice/v1/name/{wallet}";\n  }\n\n  // highlight-start\n  // ResolveWallet allows a user to resolve the wallet of a name.\n  rpc ResolveWallet(QueryResolveWalletRequest) returns (QueryResolveWalletResponse) {\n    option (google.api.http).get = "/nameservice/v1/wallet/{name}";\n  }\n  // highlight-end\n}\n\n// highlight-start\nmessage QueryResolveWalletRequest {\n  string name = 1;\n}\n\nmessage QueryResolveWalletResponse {\n  string wallet = 1;\n}\n// highlight-end\n'})}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"make proto-gen\n"})})]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:"Hint #2"}),(0,r.jsxs)("p",{children:["Iterate through the ",(0,r.jsx)(t.code,{children:"k.Keeper.NameMapping"}),", check the Value(). if it matches the name requested, return that wallet (Key)"]})]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:"Solution #2"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",metastring:'title="x/nameservice/keeper/query_server.go"',children:'// ResolveWallet implements types.QueryServer.\nfunc (k Querier) ResolveWallet(goCtx context.Context, req *types.QueryResolveWalletRequest) (*types.QueryResolveWalletResponse, error) {\n\t// highlight-start\n\t// create a way to iterate over all the name mappings.\n\titer, err := k.Keeper.NameMapping.Iterate(goCtx, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer iter.Close()\n\n\tfor ; iter.Valid(); iter.Next() {\n\t\t// get the value (name)\n\t\tv, err := iter.Value()\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\t// if current name matches the requested name,\n\t\t// return the wallet address for the name\n\t\tif v == req.Name {\n\t\t\twalletAddr, err := iter.Key()\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\n\t\t\treturn &types.QueryResolveWalletResponse{\n\t\t\t\tWallet: walletAddr,\n\t\t\t}, nil\n\t\t}\n\t}\n\n\treturn nil, fmt.Errorf("wallet not found for name %s", req.Name)\n\t// highlight-end\n}\n\n\n'})}),(0,r.jsxs)(t.p,{children:["This is not the most efficient way to do this. If you would like, create a new WalletMapping collection that maps name->sender when ",(0,r.jsx)(t.code,{children:"SetServiceName"})," is called. This way you can resolve the wallet from the name in O(1) time (i.e. instant) instead of looping through all possible wallets."]})]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:"Hint #3"}),(0,r.jsxs)("p",{children:["Add the AutoCLI method to ",(0,r.jsx)(t.code,{children:"ResolveWallet"})," with the ",(0,r.jsx)(t.code,{children:"ProtoField"}),' "name" to match the .proto file']})]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:"Solution #3"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",metastring:'title="x/nameservice/autocli.go"',children:'func (am AppModule) AutoCLIOptions() *autocliv1.ModuleOptions {\n\treturn &autocliv1.ModuleOptions{\n\t\tQuery: &autocliv1.ServiceCommandDescriptor{\n\t\t\tService: modulev1.Query_ServiceDesc.ServiceName,\n\t\t\tRpcCommandOptions: []*autocliv1.RpcCommandOptions{\n\t\t\t\t{\n\t\t\t\t\tRpcMethod: "ResolveName",\n\t\t\t\t\tUse:       "resolve [wallet]",\n\t\t\t\t\tShort:     "Resolve the name of a wallet address",\n\t\t\t\t\tPositionalArgs: []*autocliv1.PositionalArgDescriptor{\n\t\t\t\t\t\t{ProtoField: "wallet"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t// highlight-start\n\t\t\t\t{\n\t\t\t\t\tRpcMethod: "ResolveWallet",\n\t\t\t\t\tUse:       "wallet [name]",\n\t\t\t\t\tShort:     "Resolve the wallet address from a given name",\n\t\t\t\t\tPositionalArgs: []*autocliv1.PositionalArgDescriptor{\n\t\t\t\t\t\t{ProtoField: "name"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t// highlight-end\n\t\t\t\t{\n\t\t\t\t\tRpcMethod: "Params",\n\t\t\t\t\tUse:       "params",\n\t\t\t\t\tShort:     "Query the current module parameters",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t...\n'})}),(0,r.jsxs)(t.p,{children:["Then ",(0,r.jsx)(t.code,{children:"make install"})," and re-run the testnet to verify ",(0,r.jsx)(t.code,{children:"rolld q nameservice wallet <name>"})," returns the expected wallet address."]})]})]})}function h(e={}){const{wrapper:t}={...(0,l.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>a});var r=n(7294);const l={},s=r.createContext(l);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);